// <auto-generated />
using System;
using IP_Manager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IP_Manager.Migrations
{
    [DbContext(typeof(DbsContext))]
    [Migration("20250519195608_subnetModelUpgrade")]
    partial class subnetModelUpgrade
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IP_Manager.Models.Client", b =>
                {
                    b.Property<int>("clientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("clientID"));

                    b.Property<string>("contactNO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("physicalAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("clientID");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("IP_Manager.Models.Device", b =>
                {
                    b.Property<int>("deviceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("deviceID"));

                    b.Property<string>("deviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deviceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("macAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("deviceID");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("IP_Manager.Models.IP_Assigned", b =>
                {
                    b.Property<int>("IPID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IPID"));

                    b.Property<int>("IpAddress")
                        .HasColumnType("int");

                    b.Property<DateOnly>("dateReleased")
                        .HasColumnType("date");

                    b.Property<int?>("deviceID")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<int?>("subnetID")
                        .HasColumnType("int");

                    b.HasKey("IPID");

                    b.HasIndex("deviceID")
                        .IsUnique()
                        .HasFilter("[deviceID] IS NOT NULL");

                    b.HasIndex("subnetID", "IpAddress")
                        .IsUnique()
                        .HasFilter("[subnetID] IS NOT NULL");

                    b.ToTable("IP_Assigned");
                });

            modelBuilder.Entity("IP_Manager.Models.Project", b =>
                {
                    b.Property<int>("projectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("projectID"));

                    b.Property<int?>("clientID")
                        .HasColumnType("int");

                    b.Property<DateOnly>("endDate")
                        .HasColumnType("date");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("projectDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("projectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("startDate")
                        .HasColumnType("date");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("projectID");

                    b.HasIndex("clientID");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("IP_Manager.Models.Subnet", b =>
                {
                    b.Property<int>("subnetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("subnetID"));

                    b.Property<byte[]>("IPV4")
                        .IsRequired()
                        .HasColumnType("BINARY(4)");

                    b.Property<byte[]>("Mask")
                        .IsRequired()
                        .HasColumnType("BINARY(4)");

                    b.Property<DateOnly>("createdAt")
                        .HasColumnType("date");

                    b.Property<string>("maskString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("projectID")
                        .HasColumnType("int");

                    b.HasKey("subnetID");

                    b.HasIndex("IPV4")
                        .IsUnique();

                    b.HasIndex("projectID");

                    b.ToTable("Subnet");
                });

            modelBuilder.Entity("IP_Manager.Models.IP_Assigned", b =>
                {
                    b.HasOne("IP_Manager.Models.Device", "device")
                        .WithOne("IP_assined")
                        .HasForeignKey("IP_Manager.Models.IP_Assigned", "deviceID");

                    b.HasOne("IP_Manager.Models.Subnet", "subnets")
                        .WithMany("iP_Assignements")
                        .HasForeignKey("subnetID");

                    b.Navigation("device");

                    b.Navigation("subnets");
                });

            modelBuilder.Entity("IP_Manager.Models.Project", b =>
                {
                    b.HasOne("IP_Manager.Models.Client", "Client")
                        .WithMany("projects")
                        .HasForeignKey("clientID");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("IP_Manager.Models.Subnet", b =>
                {
                    b.HasOne("IP_Manager.Models.Project", "projects")
                        .WithMany("Subnets")
                        .HasForeignKey("projectID");

                    b.Navigation("projects");
                });

            modelBuilder.Entity("IP_Manager.Models.Client", b =>
                {
                    b.Navigation("projects");
                });

            modelBuilder.Entity("IP_Manager.Models.Device", b =>
                {
                    b.Navigation("IP_assined")
                        .IsRequired();
                });

            modelBuilder.Entity("IP_Manager.Models.Project", b =>
                {
                    b.Navigation("Subnets");
                });

            modelBuilder.Entity("IP_Manager.Models.Subnet", b =>
                {
                    b.Navigation("iP_Assignements");
                });
#pragma warning restore 612, 618
        }
    }
}
